import React from 'react';
import { ExternalLink } from 'lucide-react';

interface LabelWithTooltipProps {
  type: 'sourced' | 'inferred' | 'review recommended';
  source_url?: string;
  enabled: boolean;
}

const LabelWithTooltip: React.FC<LabelWithTooltipProps> = ({ type, source_url, enabled }) => {
  const getStyles = () => {
    switch (type) {
      case 'sourced':
        return 'bg-blue-50 text-blue-700 border-blue-200';
      case 'inferred':
        return 'bg-orange-50 text-orange-700 border-orange-200';
      case 'review recommended':
        return 'bg-yellow-50 text-yellow-700 border-yellow-200';
      default:
        return 'bg-gray-50 text-gray-700 border-gray-200';
    }
  };

  const getTooltipText = () => {
    switch (type) {
      case 'sourced':
        return 'This content is extracted from attached source';
      case 'inferred':
        return 'The content was generated by AI based on the context of attached source';
      case 'review recommended':
        return 'We suggest expert validation before use';
      default:
        return '';
    }
  };

  return (
    <div className="flex items-center space-x-1">
      <span 
        className={`inline-flex items-center px-2 py-0.5 rounded-md text-xs font-medium border cursor-help relative group ${getStyles()} ${
          !enabled ? 'opacity-75' : ''
        }`}
        title={getTooltipText()}
      >
        {type}
        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10">
          {getTooltipText()}
        </div>
      </span>
      {source_url && (
        <button
          onClick={() => window.open(source_url, '_blank')}
          className="flex-shrink-0 p-0.5 rounded hover:bg-gray-200 transition-colors"
          title="View source page"
        >
          <ExternalLink size={12} className={enabled ? 'text-blue-600 hover:text-blue-700' : 'text-blue-400'} />
        </button>
      )}
    </div>
  );
};

export default LabelWithTooltip;